<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--1、属性-->
    <!--通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的是 properties 属性中指定的属性。-->
    <properties resource="config.properties">
        <!--为属性设置默认值的全局开关。-->
        <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/>
        <!--<property name="username" value="hyh"/>-->
        <property name="password" value="huan"/>
    </properties>
    <!--2、设置-->
    <settings>
        <!--该配置影响的所有映射器中配置的缓存的全局开关。-->
        <setting name="cacheEnabled" value="true"/>
        <!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!--当禁用时，会按需加载属性值。-->
        <setting name="aggressiveLazyLoading" value="false"/>
        <!--是否允许单一语句返回多结果集（需要兼容驱动）。-->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!--使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。-->
        <setting name="useColumnLabel" value="true"/>
        <!--允许 JDBC 支持自动生成主键，需要驱动兼容。如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。-->
        <setting name="useGeneratedKeys" value="false"/>
        <!--指定 MyBatis 应如何自动映射列到字段或属性。NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。FULL 会自动映射任意复杂的结果集（无论是否嵌套）。-->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!--指定 MyBatis 应如何响应自动映射的未知的列或属性。-->
        <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
        <!--配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）；BATCH 执行器将重用语句并执行批量更新。-->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!--设置超时时间，它决定驱动等待数据库响应的秒数。-->
        <setting name="defaultStatementTimeout" value="25"/>
        <!--为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。-->
        <setting name="defaultFetchSize" value="100"/>
        <!--允许在嵌套语句中使用分页（RowBounds）。如果允许，则为 false。-->
        <setting name="safeRowBoundsEnabled" value="false"/>
        <!--允许在嵌套语句中使用分页（ResultHandler）。如果允许，则为 false。-->
        <setting name="safeResultHandlerEnabled" value="true"/>
        <!--是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。-->
        <setting name="mapUnderscoreToCamelCase" value="false"/>
        <!--MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。-->
        <setting name="localCacheScope" value="SESSION"/>
        <!--当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。-->
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <!--指定哪个对象的方法触发一次延迟加载。-->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
        <!--指定动态 SQL 生成的默认语言。-->
        <setting name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.xmltags.XMLLanguageDriver"/>
        <!--指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意基本类型（int、boolean等）是不能设置成 null 的。-->
        <setting name="callSettersOnNulls" value="false"/>
        <!--当整行属性皆为 null 时，返回 null 对象，或者不返回。-->
        <setting name="returnInstanceForEmptyRow" value="false"/>
        <!--指定 MyBatis 增加到日志名称的前缀。-->
        <setting name="logPrefix" value="MyBatis"/>
        <!--指定 MyBatis 所用日志的具体实现，未指定时将自动查找。-->
        <setting name="logImpl" value="LOG4J"/>
        <!--指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。-->
        <setting name="proxyFactory" value="JAVASSIST"/>
        <!--指定 VFS 的实现-->
        <!--<setting name="vfsImpl" value=""/>-->
        <!--允许使用方法签名中的名称作为语句参数名称。为了使用该特性，你的工程必须采用 Java 8 编译，并且加上 -parameters 选项。-->
        <!--<setting name="useActualParamName" value="true"/>-->
    </settings>
    <!--3、类型命名-->
    <typeAliases>
        <!--<typeAlias alias="Blog" type="com.heyuhuan.model.Blog"/>-->
        <!--每一个在包 com.heyuhuan.model 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。比如 com.heyuhuan.model.Blog 的别名为 blog；若有注解，则别名为其注解值。-->
        <package name="com.heyuhuan.model"/>
    </typeAliases>
    <!--4、类型处理器-->
    <typeHandlers>
        <!--<typeHandler handler="com.heyuhuan.handler.ExampleTypeHandler"/>-->
        <package name="com.heyuhuan.handler"/>
    </typeHandlers>
    <!--7、环境-->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <!--可以在属性后面加上冒号来设置默认值，但先要打开全局开关。-->
                <property name="username" value="${username:hyh}"/>
                <property name="password" value="${password}"/>
                <!--在任意时间可以存在的活动（也就是正在使用）连接数量。-->
                <property name="poolMaximumActiveConnections" value="10"/>
                <!--任意时间可能存在的空闲连接数。-->
                <property name="poolMaximumIdleConnections" value="10"/>
                <!--在被强制返回之前，池中连接被检出（checked out）时间。-->
                <property name="poolMaximumCheckoutTime" value="20000"/>
                <!--如果获取连接花费的相当长的时间，它会给连接池打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直安静的失败）。-->
                <property name="poolTimeToWait" value="20000"/>
                <!--发送到数据库的侦测查询，用来检验连接是否处在正常工作秩序中并准备接受请求。-->
                <property name="poolPingQuery" value="NO PING QUERY SET"/>
                <!--是否启用侦测查询。若开启，也必须使用一个可执行的 SQL 语句设置 poolPingQuery 属性（最好是一个非常快的 SQL）。-->
                <property name="poolPingEnabled" value="false"/>
                <!--配置 poolPingQuery 的使用频度。-->
                <property name="poolPingConnectionsNotUsedFor" value="0"/>
            </dataSource>
        </environment>
    </environments>
    <mappers>
        <mapper resource="com/heyuhuan/model/Blog.xml"/>
        <mapper resource="com/heyuhuan/model/Article.xml"/>
    </mappers>
</configuration>